str_remove_all(str_vec, "[:digit:]")
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
remove_digits(c("INFO 201", "CSE 142"))
# Vectors ----------------------------------------------------------------------
# Create a vector `movies` that contains the names of six movies you like
movies <- c("Harry Potter",
"Star Trek",
"The Lord of the Rings",
"The Social Network",
"Iron Man",
"Star War")
# Create a vector `top_three` that only contains the first three movies
# You should do this by subsetting the vector, not by simply retyping the movies
indicies <- c(1, 3, 4)
top_three <- movies[indicies]
# Using your vector and the `paste()` method, create a vector `excited` that
# adds the phrase - " is a great movie!" to the end of each element `movies`
excited <- paste(top_three, " is a great movie!")
# Create a vector `without_four` by omitting the fourth element from `movies`
# You should do this using a _negative index_
without_four <- movies[-(4:4)]
# Create a vector `multiples_of_4` that is every number divisible by 4
# between 4 and 400 (**2 points**)
multiples_of_4 <- c(4:400)
multiples_of_4 <- multiples_of_4[(multiples_of_4 %% 4) == 0]
# Create a vector `multiples_of_8` by filtering your `multiples_of_4` variable
# down to only elements that are divisible by 8.
multiples_of_8 <- c(multiples_of_4[(multiples_of_4 && 8) == 0])
# Create a vector `numbers` that is the numbers 700 through 999
# Using the built in `length()` function, create a variable `numbers_len`
# that is equal to the length of your vector `numbers`
# Using the `mean()` function, create a variable `numbers_mean` that is
# equal to the mean of your vector `numbers`
# Using the `median()` function, create a variable `numbers_median`
# that is the median of your vector `numbers`
# Create a vector `lower_numbers` that the values in your `numbers` vector
# that are lower than `numbers_mean` (you should do this using vector filtering)
# Create a vector `higher_numbers` that the values in your `numbers` vector
# that are higher than `numbers_mean` (again, using vector filtering)
# Lists ------------------------------------------------------------------------
# Create a list called `summary_info` in which you'll store summary information
# about the `numbers` vector above. The list should have the following keys:
# - `length`: in which you'll store the length of the vector
# - `mean`: in which you'll store the mean of the vector
# - `median`: in which you'll store the median of the vector
# Now, write a function called `summarize_vector` that takes in a vector of
# numbers, and returns a list of summary information about that vector
# (including the mean, median, and length)
# Create a list `summary_1_to_100` by passing a vector of the values one
# through one hundred to your `summarize_vector` function
# Create a vector `multiples_of_8` by filtering your `multiples_of_4` variable
# down to only elements that are divisible by 8.
multiples_of_8 <- (multiples_of_4 && 8) == 0
# Create a vector `numbers` that is the numbers 700 through 999
multiples_of_4 <- c(700:999)
# Create a vector `multiples_of_8` by filtering your `multiples_of_4` variable
# down to only elements that are divisible by 8.
multiples_of_8 <- (multiples_of_4 && 8) == 0
multiples_of_4 <- c(4:400)
multiples_of_4 <- multiples_of_4[(multiples_of_4 %% 4) == 0]
multiples_of_8 <- multiples_of_4[(multiples_of_4 %% 8) == 0]
# Using the built in `length()` function, create a variable `numbers_len`
# that is equal to the length of your vector `numbers`
numbers_len <- length(numbers)
numbers <- c(700:999)
# Using the built in `length()` function, create a variable `numbers_len`
# that is equal to the length of your vector `numbers`
numbers_len <- length(numbers)
# Using the `mean()` function, create a variable `numbers_mean` that is
# equal to the mean of your vector `numbers`
numbers_mean <- mean(numbers)
# Create a vector `lower_numbers` that the values in your `numbers` vector
# that are lower than `numbers_mean` (you should do this using vector filtering)
lower_numbers <- numbers([numbers < numbers_mean])
# Create a vector `lower_numbers` that the values in your `numbers` vector
# that are lower than `numbers_mean` (you should do this using vector filtering)
lower_numbers <- numbers[numbers < numbers_mean]
# A2 foundational skills
# Set up and Defining variables ------------------------------------------------
# Load the the `stringr` package
# (you'll need to install it if you haven't used it before)
# It has a variety of functions that make working with string variables easier
library("stringr")
# Create a numeric variable `my_age` that is equal to your age
my_age <- 19
# Create a variable `my_name` that is equal to your first name
my_name <- "Leqi"
# Using multiplication, create a variable `minutes_in_a_day` that is
# equal to the number of minutes in a day
hour_per_day <- 24
min_per_hour <- 60
minutes_in_a_day <- hour_per_day * min_per_hour
# Using multiplication, create a variable `hours_in_a_year` that is
# equal to the number of hours in a year
day_per_year <- 365
hours_in_a_year <- day_per_year * hour_per_day
# Create a variable `more_minutes_than_hours` that is boolean (TRUE/FALSE)
# It should be TRUE if there are more minutes/day than hours/year
# Otherwise it should be FALSE
more_minutes_than_hours <- minutes_in_a_day > hours_in_a_year
# Working with functions -------------------------------------------------------
# Write a function `make_introduction()` that takes in two args (`name`, `age`)
# This function should return a string value that says:
# "Hello, my name is {name}, and I'm {age} years old."
# The values {name} and {age} should take on the values passed into the function
# Make sure that proper spacing is used (e.g., you shouldn't have multiple
# spaces between words, and you should have a space after a comma)
make_introduction <- function(name, age) {
paste0("Hello, my name is ", name, ", and I'm ", age, " years old.")
}
# Create a variable `my_intro` by passing your variables `my_name` and `my_age`
# into your `make_introduction()` function
my_intro <- make_introduction(my_name, my_age)
# Create a variable `casual_intro` by substituting "Hello, my name is ",
# with "Hey, I'm" in your `my_intro` variable
casual_intro <- paste(my_intro) #copy by value
str_sub(casual_intro, 1, 17) <- "Hey, I'm "
# Create a variable `loud_intro`, which is `my_intro` in all upper-case letters
# You should do this by using a function to convert your `my_intro` variable
# into all capital letters.
loud_intro <- str_to_upper(my_intro)
# Create a variable `quiet_intro`, which is `my_intro` in all lower-case letters
# You should do this by using a function to convert your `my_intro` variable
# into all lower-case letters.
quiet_intro <- str_to_lower(my_intro)
# Create a new variable `capitalized_intro`, which is your `my_intro` variable,
# but with each word capitalized. hint: use the stringr function `str_to_title`
capitalized_intro <- str_to_title(my_intro)
# Using the `str_count` function, create a variable `occurrences` that stores
# the # of times the letter "e" appears in `my_intro`
occurrences <- str_count(my_intro, "e")
# Write a function `double()` that takes in a value and
# returns that value times two
double <- function(value) {
value * 2
}
# Using your `double()` function, create a variable `minutes_in_two_days`,
# which is the number of minutes in two days
minutes_in_two_days <- double(minutes_in_a_day)
# Write a function `cube()` that takes in a value and returns that value cubed
cube <- function(value) {
value ^ 3
}
# Create a variable `twenty_seven` by passing 3 to your `cube()` function
twenty_seven <- cube(3)
# Create a function `inches_to_cm` that converts from inches to centimeters
inches_to_cm <- function(inches) {
cm_per_inch <- 2.54
inches * cm_per_inch
}
# Create a variable `inches_tall` that is your (numeric) height in inches
inches_tall <- 64
# Using your `inches_to_cm` function and your `inches_tall` variable,
# create a variable `cm_tall` that is your height in centimeters
cm_tall <- inches_to_cm(inches_tall)
# Write a function `has_more_zs` to determine which of two strings contains
# more instances of the letter "z". It should take as parameters two string
# variables, and return the argument which has more occurances of the letter "z"
# If neither phrase contains the letter "z", it should return:
# "Neither string contains the letter z."
# If the phrases contain the same number of "z"s, it should return:
# "The strings have the same number of Zs."
# The function must work for both capital and lowercase "z"s.
has_more_zs <- function(str1, str2) {
count1 <- str_count(str1, "z|Z")
count2 <- str_count(str2, "z|Z")
if(count1 == 0 & count2 == 0) {
"Neither string contains the letter z."
} else {
if(count1 > count2) {
str1
} else if(count2 > count1) {
str2
} else {
"The strings have the same number of Zs."
}
}
}
# Create a variable `more_zs` by passing two strings of your choice to your
# `has_more_zs` function
more_zs <- has_more_zs("zzzZ", "zzzz")
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(str_vec) {
str_remove_all(str_vec, "[:digit:]")
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
remove_digits(c("INFO 201", "CSE 142"))
# Vectors ----------------------------------------------------------------------
# Create a vector `movies` that contains the names of six movies you like
movies <- c("Harry Potter",
"Star Trek",
"The Lord of the Rings",
"The Social Network",
"Iron Man",
"Star War")
# Create a vector `top_three` that only contains the first three movies
# You should do this by subsetting the vector, not by simply retyping the movies
indicies <- c(1, 3, 4)
top_three <- movies[indicies]
# Using your vector and the `paste()` method, create a vector `excited` that
# adds the phrase - " is a great movie!" to the end of each element `movies`
excited <- paste(top_three, " is a great movie!")
# Create a vector `without_four` by omitting the fourth element from `movies`
# You should do this using a _negative index_
without_four <- movies[-(4:4)]
# Create a vector `multiples_of_4` that is every number divisible by 4
# between 4 and 400 (**2 points**)
multiples_of_4 <- c(4:400)
multiples_of_4 <- multiples_of_4[(multiples_of_4 %% 4) == 0]
# Create a vector `multiples_of_8` by filtering your `multiples_of_4` variable
# down to only elements that are divisible by 8.
multiples_of_8 <- multiples_of_4[(multiples_of_4 %% 8) == 0]
# Create a vector `numbers` that is the numbers 700 through 999
numbers <- c(700:999)
# Using the built in `length()` function, create a variable `numbers_len`
# that is equal to the length of your vector `numbers`
numbers_len <- length(numbers)
# Using the `mean()` function, create a variable `numbers_mean` that is
# equal to the mean of your vector `numbers`
numbers_mean <- mean(numbers)
# Using the `median()` function, create a variable `numbers_median`
# that is the median of your vector `numbers`
numbers_median <- median(numbers)
# Create a vector `lower_numbers` that the values in your `numbers` vector
# that are lower than `numbers_mean` (you should do this using vector filtering)
lower_numbers <- numbers[numbers < numbers_mean]
# Create a vector `higher_numbers` that the values in your `numbers` vector
# that are higher than `numbers_mean` (again, using vector filtering)
higher_numbers <- numbers[numbers > numbers_mean]
# Lists ------------------------------------------------------------------------
# Create a list called `summary_info` in which you'll store summary information
# about the `numbers` vector above. The list should have the following keys:
# - `length`: in which you'll store the length of the vector
# - `mean`: in which you'll store the mean of the vector
# - `median`: in which you'll store the median of the vector
summary_info <- list(
length = numbers_len,
mean = numbers_mean,
median = numbers_median
)
# Now, write a function called `summarize_vector` that takes in a vector of
# numbers, and returns a list of summary information about that vector
# (including the mean, median, and length)
# Create a list `summary_1_to_100` by passing a vector of the values one
# through one hundred to your `summarize_vector` function
summarize_vector <- function(num) {
list(
mean(num),
median(num),
length(num)
)
}
print(summarize_vector(c(700:999)))
save.image("~/Documents/au19-info201-leqiw2/dataset/a2.RData")
clear()
install.packages(rmarkdown)
install.packages(rmarkdown)
install.packages("rmarkdown")
install.packages("knitr")
---
title: "test-markdown-file0"
author: "leqiw2"
date: "10/30/2019"
output: html_document
---
# Load packages
library("dplyr")
library("ggmap")
library("ggplot2")
# Load data from GitHub
permit_data <- read.csv(
"https://raw.githubusercontent.com/programming-for-data-science/in-action/master/interactive-vis/data/Building_Permits.csv",
stringsAsFactors = F)
# Formatting and filtering data
samp <- permit_data %>%
filter(!is.na(Longitude), !is.na(Latitude), Longitude <0, Latitude < 100) %>%
filter(PermitTypeDesc == "New") %>%
mutate(year = as.numeric(substr(IssuedDate, 1, 4))) %>%
filter(year > 2010)
# Load packages
library("dplyr")
library("ggmap")
library("ggplot2")
# Load data from GitHub
permit_data <- read.csv(
"https://raw.githubusercontent.com/programming-for-data-science/in-action/master/interactive-vis/data/Building_Permits.csv",
stringsAsFactors = F)
# Formatting and filtering data
samp <- permit_data %>%
filter(!is.na(Longitude), !is.na(Latitude), Longitude <0, Latitude < 100) %>%
filter(PermitTypeDesc == "New") %>%
mutate(year = as.numeric(substr(IssuedDate, 1, 4))) %>%
filter(year > 2010)
View(samp)
install.packages("ggmap")
# Load packages
library("dplyr")
library("ggmap")
library("ggplot2")
# Load data from GitHub
permit_data <- read.csv(
"https://raw.githubusercontent.com/programming-for-data-science/in-action/master/interactive-vis/data/Building_Permits.csv",
stringsAsFactors = F)
# Formatting and filtering data
samp <- permit_data %>%
filter(!is.na(Longitude), !is.na(Latitude), Longitude <0, Latitude < 100) %>%
filter(PermitTypeDesc == "New") %>%
mutate(year = as.numeric(substr(IssuedDate, 1, 4))) %>%
filter(year > 2010)
qmplot(
data = samp,
x = Longitude,
y = Latitude,
color = as.character(year)
) + scale_color_discrete() +
labs(color = "Year")
qmplot(
data = samp,
x = Longitude,
y = Latitude,
color = as.character(year)
) + scale_color_discrete() +
labs(color = "Year")
library(readr)
smoking_data_2010_2019_ <- read_csv("Documents/info201-final-project/data/smoking data (2010-2019).csv")
View(smoking_data_2010_2019_)
knitr::opts_chunk$set(echo = TRUE)
# install.packages("plotly")
# install.packages("ggplot2")
# install.packages("leaflet")
# install.packages("kableExtra")
library(plotly)
library(ggplot2)
library(leaflet)
library(kableExtra)
source(file = "analysis.R")
kable(frequency_base_incidents, align = "c", caption = "Summary of 2018 Shooting Incidents")%>%
kable_styling()
plot_ly(
mode = "markers",
data = shootings_2018,
lat = ~lat,
lon = ~long,
marker = list(
color = "red",
size = ~(num_killed + num_injured)
),
type = 'scattermapbox',
text = ~paste("Address: ", address,
"<br>City: ", city,
"<br>State: ", state,
"<br>Date: ", date,
"<br>Dead: ", num_killed,
"<br>Injured: ", num_injured),
hovertext = text
) %>%
layout(
mapbox = list(
style = 'open-street-map',
zoom =2.5,
center = list(lon = -88, lat = 34)
)
)
View(dataframe2)
knitr::opts_chunk$set(echo = TRUE)
# install.packages("plotly")
# install.packages("ggplot2")
# install.packages("leaflet")
# install.packages("kableExtra")
library(plotly)
library(ggplot2)
library(leaflet)
library(kableExtra)
source(file = "analysis.R")
p <- ggplot(
data = dataframe2,
) +
geom_point(
mapping = aes(x = num_killed, y = num_injured, color = total_impact),
xlim(0,NA),
alpha = 0.5,
size = dataframe2$frequency
) +
labs(
title = "Kill&Injured Relationship",
x = "#Killed Per Incident",
y = "#Injured Per Incident",
colour = "Number of people impacted"
)
p <- ggplot(
data = dataframe2,
) +
geom_point(
mapping = aes(x = num_killed, y = num_injured, color = total_impact),
alpha = 0.5,
size = dataframe2$frequency
) +
labs(
title = "Kill&Injured Relationship",
x = "#Killed Per Incident",
y = "#Injured Per Incident",
colour = "Number of people impacted"
)
ggplotly(p)
p <- ggplot(
data = dataframe2,
) +
geom_point(
mapping = aes(x = num_killed, y = num_injured, color = total_impact),
alpha = 0.5,
size = dataframe2$frequency
) +
xlim(0,NA) +
labs(
title = "Kill&Injured Relationship",
x = "#Killed Per Incident",
y = "#Injured Per Incident",
colour = "Number of people impacted"
)
ggplotly(p)
p <- ggplot(
data = dataframe2,
) +
geom_point(
mapping = aes(x = num_killed, y = num_injured, color = total_impact),
x = 0,
y = 0,
alpha = 0.5,
size = dataframe2$frequency
) +
labs(
title = "Kill&Injured Relationship",
x = "#Killed Per Incident",
y = "#Injured Per Incident",
colour = "Number of people impacted"
)
ggplotly(p)
p <- ggplot(
data = dataframe2,
) +
geom_point(
mapping = aes(x = num_killed, y = num_injured, color = total_impact),
x = seq(0),
y = seq(0),
alpha = 0.5,
size = dataframe2$frequency
) +
labs(
title = "Kill&Injured Relationship",
x = "#Killed Per Incident",
y = "#Injured Per Incident",
colour = "Number of people impacted"
)
ggplotly(p)
p <- ggplot(
data = dataframe2,
) +
geom_point(
mapping = aes(x = num_killed, y = num_injured, color = total_impact),
s <- seq(1, 4, by = 0.25),
x = ~s, y = ~s,
alpha = 0.5,
size = dataframe2$frequency
) +
labs(
title = "Kill&Injured Relationship",
x = "#Killed Per Incident",
y = "#Injured Per Incident",
colour = "Number of people impacted"
)
p <- ggplot(
data = dataframe2,
) +
geom_point(
mapping = aes(x = num_killed, y = num_injured, color = total_impact),
alpha = 0.5,
size = dataframe2$frequency
) +
labs(
title = "Kill&Injured Relationship",
x = "#Killed Per Incident",
y = "#Injured Per Incident",
colour = "Number of people impacted"
) +
layout(
xaxis = list(range = c(0,17)),
yaxis = list(range = c(0,17))
)
p <- ggplot(
data = dataframe2,
) +
geom_point(
mapping = aes(x = num_killed, y = num_injured, color = total_impact),
alpha = 0.5,
size = dataframe2$frequency
) +
labs(
title = "Kill&Injured Relationship",
x = "#Killed Per Incident",
y = "#Injured Per Incident",
colour = "Number of people impacted"
)
ggplotly(p) %>%
layout(
xaxis = list(range = c(0,17)),
yaxis = list(range = c(0,17))
)
setwd("~/Documents/info201-final-project")
